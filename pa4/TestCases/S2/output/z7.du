FUNCTION _Father_New : 
BASIC BLOCK 0 : 
1	_T3 = 8 [ 2 ]
2	parm _T3
3	_T4 =  call _Alloc [ 5 7 8 ]
4	_T5 = 0 [ 5 ]
5	*(_T4 + 4) = _T5
6	_T6 = VTBL <_Father> [ 7 ]
7	*(_T4 + 0) = _T6
8	END BY RETURN, result = _T4

FUNCTION _Child_New : 
BASIC BLOCK 0 : 
9	_T7 = 8 [ 10 ]
10	parm _T7
11	_T8 =  call _Alloc [ 13 15 16 ]
12	_T9 = 0 [ 13 ]
13	*(_T8 + 4) = _T9
14	_T10 = VTBL <_Child> [ 15 ]
15	*(_T8 + 0) = _T10
16	END BY RETURN, result = _T8

FUNCTION _Main_New : 
BASIC BLOCK 0 : 
17	_T11 = 4 [ 18 ]
18	parm _T11
19	_T12 =  call _Alloc [ 21 22 ]
20	_T13 = VTBL <_Main> [ 21 ]
21	*(_T12 + 0) = _T13
22	END BY RETURN, result = _T12

FUNCTION _Father.method : 
BASIC BLOCK 0 : 
23	_T14 = 0 [ 24 ]
24	_T15 = (_T1 > _T14) [ 27 ]
25	_T16 = 10 [ 26 ]
26	_T17 = (_T1 < _T16) [ 27 ]
27	_T18 = (_T15 && _T17) [ 28 ]
28	END BY BEQZ, if _T18 = 
	    0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
29	_T19 = 3 [ 30 ]
30	_T20 = (_T1 - _T19) [ 31 ]
31	_T1 = _T20 [ 33 ]
32	parm _T0
33	parm _T1
34	_T21 = *(_T0 + 0) [ 35 ]
35	_T22 = *(_T21 + 8) [ 36 ]
36	_T23 =  call _T22 [ 37 ]
37	END BY RETURN, result = _T23
BASIC BLOCK 2 : 
38	END BY RETURN, result = _T1

FUNCTION _Child.start : 
BASIC BLOCK 0 : 
39	_T24 = _T2 [ 40 42 ]
40	_T25 = *(_T24 + 4) [ ]
41	_T26 = 5 [ 42 ]
42	*(_T24 + 4) = _T26
43	_T27 = 0 [ 44 ]
44	_T24 = _T27 [ ]
45	_T28 = *(_T2 + 4) [ 46 ]
46	parm _T28
47	call _PrintInt
48	END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
49	_T30 =  call _Child_New [ 50 ]
50	_T29 = _T30 [ 52 54 62 63 ]
51	_T31 = 5 [ 53 ]
52	parm _T29
53	parm _T31
54	_T32 = *(_T29 + 0) [ 55 ]
55	_T33 = *(_T32 + 8) [ 56 ]
56	_T34 =  call _T33 [ 57 ]
57	parm _T34
58	call _PrintInt
59	_T35 = "\n" [ 60 ]
60	parm _T35
61	call _PrintString
62	parm _T29
63	_T36 = *(_T29 + 0) [ 64 ]
64	_T37 = *(_T36 + 12) [ 65 ]
65	call _T37
66	END BY RETURN, void result

